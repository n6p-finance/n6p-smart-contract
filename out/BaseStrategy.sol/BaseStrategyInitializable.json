{"abi":[{"type":"function","name":"apiVersion","inputs":[],"outputs":[{"name":"","type":"string","internalType":"string"}],"stateMutability":"pure"},{"type":"function","name":"baseFeeOracle","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"clone","inputs":[{"name":"_vault","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"nonpayable"},{"type":"function","name":"clone","inputs":[{"name":"_vault","type":"address","internalType":"address"},{"name":"_strategist","type":"address","internalType":"address"},{"name":"_rewards","type":"address","internalType":"address"},{"name":"_lunar","type":"address","internalType":"address"}],"outputs":[{"name":"newStrategy","type":"address","internalType":"address"}],"stateMutability":"nonpayable"},{"type":"function","name":"creditThreshold","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"delegatedAssets","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"doHealthCheck","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"emergencyExit","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"estimatedTotalAssets","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"ethToWant","inputs":[{"name":"_amtInWei","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"forceHarvestTriggerOnce","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"harvest","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"harvestTrigger","inputs":[{"name":"callCostInWei","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"healthCheck","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"initialize","inputs":[{"name":"_vault","type":"address","internalType":"address"},{"name":"_strategist","type":"address","internalType":"address"},{"name":"_rewards","type":"address","internalType":"address"},{"name":"_lunar","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"isActive","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"isBaseFeeAcceptable","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"isOriginal","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"lunar","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"maxReportDelay","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"metadataURI","inputs":[],"outputs":[{"name":"","type":"string","internalType":"string"}],"stateMutability":"view"},{"type":"function","name":"migrate","inputs":[{"name":"_newStrategy","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"minReportDelay","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"name","inputs":[],"outputs":[{"name":"","type":"string","internalType":"string"}],"stateMutability":"view"},{"type":"function","name":"rewards","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"setBaseFeeOracle","inputs":[{"name":"_baseFeeOracle","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setCreditThreshold","inputs":[{"name":"_creditThreshold","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setDoHealthCheck","inputs":[{"name":"_doHealthCheck","type":"bool","internalType":"bool"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setEmergencyExit","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setForceHarvestTriggerOnce","inputs":[{"name":"_forceHarvestTriggerOnce","type":"bool","internalType":"bool"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setHealthCheck","inputs":[{"name":"_healthCheck","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setKeeper","inputs":[{"name":"_lunar","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setMaxReportDelay","inputs":[{"name":"_delay","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setMetadataURI","inputs":[{"name":"_metadataURI","type":"string","internalType":"string"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setMinReportDelay","inputs":[{"name":"_delay","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setRewards","inputs":[{"name":"_rewards","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setStrategist","inputs":[{"name":"_strategist","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"strategist","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"sweep","inputs":[{"name":"_token","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"tend","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"tendTrigger","inputs":[{"name":"callCostInWei","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"vault","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract VaultAPI"}],"stateMutability":"view"},{"type":"function","name":"want","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract IERC20"}],"stateMutability":"view"},{"type":"function","name":"withdraw","inputs":[{"name":"_amountNeeded","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"_loss","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"event","name":"Cloned","inputs":[{"name":"clone","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"event","name":"EmergencyExitEnabled","inputs":[],"anonymous":false},{"type":"event","name":"ForcedHarvestTrigger","inputs":[{"name":"triggerState","type":"bool","indexed":false,"internalType":"bool"}],"anonymous":false},{"type":"event","name":"Harvested","inputs":[{"name":"profit","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"loss","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"debtPayment","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"debtOutstanding","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"SetDoHealthCheck","inputs":[{"name":"","type":"bool","indexed":false,"internalType":"bool"}],"anonymous":false},{"type":"event","name":"SetHealthCheck","inputs":[{"name":"","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"UpdatedBaseFeeOracle","inputs":[{"name":"baseFeeOracle","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"UpdatedCreditThreshold","inputs":[{"name":"creditThreshold","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"UpdatedKeeper","inputs":[{"name":"newKeeper","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"UpdatedMaxReportDelay","inputs":[{"name":"delay","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"UpdatedMetadataURI","inputs":[{"name":"metadataURI","type":"string","indexed":false,"internalType":"string"}],"anonymous":false},{"type":"event","name":"UpdatedMinReportDelay","inputs":[{"name":"delay","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"UpdatedRewards","inputs":[{"name":"rewards","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"UpdatedStrategist","inputs":[{"name":"newStrategist","type":"address","indexed":false,"internalType":"address"}],"anonymous":false}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"apiVersion()":"25829410","baseFeeOracle()":"826cddf6","clone(address)":"8124b78e","clone(address,address,address,address)":"d0511842","creditThreshold()":"aa5480cf","delegatedAssets()":"8e6350e2","doHealthCheck()":"6718835f","emergencyExit()":"5641ec03","estimatedTotalAssets()":"efbb5cb0","ethToWant(uint256)":"780022a0","forceHarvestTriggerOnce()":"a763cf5b","harvest()":"4641257d","harvestTrigger(uint256)":"ed882c2b","healthCheck()":"b252720b","initialize(address,address,address,address)":"f8c8765e","isActive()":"22f3e2d4","isBaseFeeAcceptable()":"95326e2d","isOriginal()":"6f392ce7","lunar()":"d7e981c7","maxReportDelay()":"28b7ccf7","metadataURI()":"03ee438c","migrate(address)":"ce5494bb","minReportDelay()":"95e80c50","name()":"06fdde03","rewards()":"9ec5a894","setBaseFeeOracle(address)":"9f450b5a","setCreditThreshold(uint256)":"fe2508a6","setDoHealthCheck(bool)":"ac00ff26","setEmergencyExit()":"fcf2d0ad","setForceHarvestTriggerOnce(bool)":"0ada4dab","setHealthCheck(address)":"11bc8245","setKeeper(address)":"748747e6","setMaxReportDelay(uint256)":"f017c92f","setMetadataURI(string)":"750521f5","setMinReportDelay(uint256)":"39a172a8","setRewards(address)":"ec38a862","setStrategist(address)":"c7b9d530","strategist()":"1fe4a686","sweep(address)":"01681a62","tend()":"440368a3","tendTrigger(uint256)":"650d1880","vault()":"fbfa77cf","want()":"1f1fcd51","withdraw(uint256)":"2e1a7d4d"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"clone\",\"type\":\"address\"}],\"name\":\"Cloned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EmergencyExitEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"triggerState\",\"type\":\"bool\"}],\"name\":\"ForcedHarvestTrigger\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loss\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtPayment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtOutstanding\",\"type\":\"uint256\"}],\"name\":\"Harvested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"SetDoHealthCheck\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"SetHealthCheck\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"baseFeeOracle\",\"type\":\"address\"}],\"name\":\"UpdatedBaseFeeOracle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"creditThreshold\",\"type\":\"uint256\"}],\"name\":\"UpdatedCreditThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newKeeper\",\"type\":\"address\"}],\"name\":\"UpdatedKeeper\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"UpdatedMaxReportDelay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"}],\"name\":\"UpdatedMetadataURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"UpdatedMinReportDelay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewards\",\"type\":\"address\"}],\"name\":\"UpdatedRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newStrategist\",\"type\":\"address\"}],\"name\":\"UpdatedStrategist\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"apiVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseFeeOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"clone\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewards\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lunar\",\"type\":\"address\"}],\"name\":\"clone\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newStrategy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creditThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delegatedAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"doHealthCheck\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyExit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimatedTotalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amtInWei\",\"type\":\"uint256\"}],\"name\":\"ethToWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forceHarvestTriggerOnce\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"callCostInWei\",\"type\":\"uint256\"}],\"name\":\"harvestTrigger\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"healthCheck\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewards\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lunar\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isBaseFeeAcceptable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOriginal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lunar\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxReportDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadataURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newStrategy\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minReportDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baseFeeOracle\",\"type\":\"address\"}],\"name\":\"setBaseFeeOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_creditThreshold\",\"type\":\"uint256\"}],\"name\":\"setCreditThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_doHealthCheck\",\"type\":\"bool\"}],\"name\":\"setDoHealthCheck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setEmergencyExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_forceHarvestTriggerOnce\",\"type\":\"bool\"}],\"name\":\"setForceHarvestTriggerOnce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_healthCheck\",\"type\":\"address\"}],\"name\":\"setHealthCheck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lunar\",\"type\":\"address\"}],\"name\":\"setKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_delay\",\"type\":\"uint256\"}],\"name\":\"setMaxReportDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_metadataURI\",\"type\":\"string\"}],\"name\":\"setMetadataURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_delay\",\"type\":\"uint256\"}],\"name\":\"setMinReportDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewards\",\"type\":\"address\"}],\"name\":\"setRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"}],\"name\":\"setStrategist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"callCostInWei\",\"type\":\"uint256\"}],\"name\":\"tendTrigger\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract VaultAPI\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountNeeded\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_loss\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"apiVersion()\":{\"details\":\"The Strategy's version must match the Vault's `API_VERSION`.\",\"returns\":{\"_0\":\"A string which holds the current API version of this contract.\"}},\"delegatedAssets()\":{\"details\":\"You can override this field to set it to a non-zero value if some of the assets of this  Strategy is somehow delegated inside another part of of Yearn's ecosystem e.g. another Vault.  Note that this value must be strictly less than or equal to the amount provided by  `estimatedTotalAssets()` below, as the TVL calc will be total assets minus delegated assets.  Also note that this value is used to determine the total assets under management by this  strategy, for the purposes of computing the management fee in `Vault`\",\"returns\":{\"_0\":\"The amount of assets this strategy manages that should not be included in Yearn's Total Value  Locked (TVL) calculation across it's ecosystem.\"}},\"estimatedTotalAssets()\":{\"details\":\"Care must be taken in using this function, since it relies on external  systems, which could be manipulated by the attacker to give an inflated  (or reduced) value produced by this function, based on current on-chain  conditions (e.g. this function is possible to influence through  flashloan attacks, oracle manipulations, or other DeFi attack  mechanisms).  It is up to governance to use this function to correctly order this  Strategy relative to its peers in the withdrawal queue to minimize  losses for the Vault based on sudden withdrawals. This value should be  higher than the total debt of the Strategy and higher than its expected  value to be \\\"safe\\\".\",\"returns\":{\"_0\":\"The estimated total assets in this Strategy.\"}},\"ethToWant(uint256)\":{\"details\":\"Care must be taken when working with decimals to assure that the conversion  is compatible. As an example:      given 1e17 wei (0.1 ETH) as input, and want is USDC (6 decimals),      with USDC/ETH = 1800, this should give back 1800000000 (180 USDC)\",\"params\":{\"_amtInWei\":\"The amount (in wei/1e-18 ETH) to convert to `want`\"},\"returns\":{\"_0\":\"The amount in `want` of `_amtInEth` converted to `want`*\"}},\"harvest()\":{\"details\":\"When `harvest()` is called, the Strategy reports to the Vault (via  `vault.report()`), so in some cases `harvest()` must be called in order  to take in profits, to borrow newly available funds from the Vault, or  otherwise adjust its position. In other cases `harvest()` must be  called to report to the Vault on the Strategy's position, especially if  any losses have occurred.\"},\"harvestTrigger(uint256)\":{\"details\":\"`callCostInWei` must be priced in terms of `wei` (1e-18 ETH).  This call and `tendTrigger` should never return `true` at the  same time.  See `maxReportDelay`, `creditThreshold` to adjust the  strategist-controlled parameters that will influence whether this call  returns `true` or not. These parameters will be used in conjunction  with the parameters reported to the Vault (see `params`) to determine  if calling `harvest()` is merited.  This trigger also checks the network's base fee to avoid harvesting during  times of high network congestion.  Consider use of super.harvestTrigger() in any override to build on top  of this logic instead of replacing it. For example, if using `minReportDelay`.  It is expected that an external system will check `harvestTrigger()`.  This could be a script run off a desktop or cloud bot (e.g.  https://github.com/iearn-finance/yearn-vaults/blob/main/scripts/keep.py),  or via an integration with the Keep3r network (e.g.  https://github.com/Macarse/GenericKeep3rV2/blob/master/contracts/keep3r/GenericKeep3rV2.sol).\",\"params\":{\"callCostInWei\":\"The lunar's estimated gas cost to call `harvest()` (in wei).\"},\"returns\":{\"_0\":\"`true` if `harvest()` should be called, `false` otherwise.\"}},\"isBaseFeeAcceptable()\":{\"returns\":{\"_0\":\"`true` if `harvest()` should be allowed, `false` otherwise.\"}},\"migrate(address)\":{\"details\":\"The new Strategy's Vault must be the same as this Strategy's Vault.  The migration process should be carefully performed to make sure all the assets are migrated to the new address, which should have never interacted with the vault before.\",\"params\":{\"_newStrategy\":\"The Strategy to migrate to.\"}},\"name()\":{\"details\":\"You can use this field to manage the \\\"version\\\" of this Strategy, e.g.  `StrategySomethingOrOtherV1`. However, \\\"API Version\\\" is managed by  `apiVersion()` function above.\",\"returns\":{\"_0\":\"This Strategy's name.\"}},\"setBaseFeeOracle(address)\":{\"params\":{\"_baseFeeOracle\":\"Address of our baseFeeOracle\"}},\"setCreditThreshold(uint256)\":{\"params\":{\"_creditThreshold\":\"The number of want tokens that will  automatically trigger a harvest.\"}},\"setEmergencyExit()\":{\"details\":\"See `vault.setEmergencyShutdown()` and `harvest()` for further details.\"},\"setForceHarvestTriggerOnce(bool)\":{\"params\":{\"_forceHarvestTriggerOnce\":\"Value of true tells keepers to harvest  our strategy\"}},\"setKeeper(address)\":{\"params\":{\"_lunar\":\"The new address to assign as `lunar`.\"}},\"setMaxReportDelay(uint256)\":{\"params\":{\"_delay\":\"The maximum number of seconds to wait between harvests.\"}},\"setMetadataURI(string)\":{\"params\":{\"_metadataURI\":\"The URI that describe the strategy.\"}},\"setMinReportDelay(uint256)\":{\"params\":{\"_delay\":\"The minimum number of seconds to wait between harvests.\"}},\"setRewards(address)\":{\"params\":{\"_rewards\":\"The address to use for pulling rewards.\"}},\"setStrategist(address)\":{\"params\":{\"_strategist\":\"The new address to assign as `strategist`.\"}},\"sweep(address)\":{\"details\":\"Implement `protectedTokens()` to specify any additional tokens that  should be protected from sweeping in addition to `want`.\",\"params\":{\"_token\":\"The token to transfer out of this vault.\"}},\"tendTrigger(uint256)\":{\"details\":\"`callCostInWei` must be priced in terms of `wei` (1e-18 ETH).  This call and `harvestTrigger()` should never return `true` at the same  time.\",\"params\":{\"callCostInWei\":\"The lunar's estimated gas cost to call `tend()` (in wei).\"},\"returns\":{\"_0\":\"`true` if `tend()` should be called, `false` otherwise.\"}},\"withdraw(uint256)\":{\"params\":{\"_amountNeeded\":\"How much `want` to withdraw.\"},\"returns\":{\"_loss\":\"Any realized losses\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"apiVersion()\":{\"notice\":\"Used to track which version of `StrategyAPI` this Strategy  implements.\"},\"delegatedAssets()\":{\"notice\":\"The amount (priced in want) of the total assets managed by this strategy should not count  towards Yearn's TVL calculations.\"},\"estimatedTotalAssets()\":{\"notice\":\"Provide an accurate estimate for the total amount of assets  (principle + return) that this Strategy is currently managing,  denominated in terms of `want` tokens.  This total should be \\\"realizable\\\" e.g. the total value that could  *actually* be obtained from this Strategy if it were to divest its  entire position based on current on-chain conditions.\"},\"ethToWant(uint256)\":{\"notice\":\"Provide an accurate conversion from `_amtInWei` (denominated in wei)  to `want` (using the native decimal characteristics of `want`).\"},\"harvest()\":{\"notice\":\"Harvests the Strategy, recognizing any profits or losses and adjusting  the Strategy's position.  In the rare case the Strategy is in emergency shutdown, this will exit  the Strategy's position.  This may only be called by governance, the strategist, or the lunar.\"},\"harvestTrigger(uint256)\":{\"notice\":\"Provide a signal to the lunar that `harvest()` should be called. The  lunar will provide the estimated gas cost that they would pay to call  `harvest()`, and this function should use that estimate to make a  determination if calling it is \\\"worth it\\\" for the lunar. This is not  the only consideration into issuing this trigger, for example if the  position would be negatively affected if `harvest()` is not called  shortly, then this can return `true` even if the lunar might be \\\"at a  loss\\\" (keepers are always reimbursed by Yearn).\"},\"isBaseFeeAcceptable()\":{\"notice\":\"Check if the current network base fee is below our external target. If  not, then harvestTrigger will return false.\"},\"migrate(address)\":{\"notice\":\"Transfers all `want` from this Strategy to `_newStrategy`.  This may only be called by the Vault.\"},\"name()\":{\"notice\":\"This Strategy's name.\"},\"setBaseFeeOracle(address)\":{\"notice\":\"Used to set our baseFeeOracle, which checks the network's current base  fee price to determine whether it is an optimal time to harvest or tend.  This may only be called by governance or management.\"},\"setCreditThreshold(uint256)\":{\"notice\":\"Used to ensure that any significant credit a strategy has from the  vault will be automatically harvested.  This may only be called by governance or management.\"},\"setEmergencyExit()\":{\"notice\":\"Activates emergency exit. Once activated, the Strategy will exit its  position upon the next harvest, depositing all funds into the Vault as  quickly as is reasonable given on-chain conditions.  This may only be called by governance or the strategist.\"},\"setForceHarvestTriggerOnce(bool)\":{\"notice\":\"Used to automatically trigger a harvest by our lunar. Can be  useful if gas prices are too high now, and we want to harvest  later once prices have lowered.  This may only be called by governance or management.\"},\"setKeeper(address)\":{\"notice\":\"Used to change `lunar`.  `lunar` is the only address that may call `tend()` or `harvest()`,  other than `governance()` or `strategist`. However, unlike  `governance()` or `strategist`, `lunar` may *only* call `tend()`  and `harvest()`, and no other authorized functions, following the  principle of least privilege.  This may only be called by governance or the strategist.\"},\"setMaxReportDelay(uint256)\":{\"notice\":\"Used to change `maxReportDelay`. `maxReportDelay` is the maximum number  of blocks that should pass for `harvest()` to be called.  For external keepers (such as the Keep3r network), this is the maximum  time between jobs to wait. (see `harvestTrigger()`  for more details.)  This may only be called by governance or the strategist.\"},\"setMetadataURI(string)\":{\"notice\":\"Used to change `metadataURI`. `metadataURI` is used to store the URI of the file describing the strategy.  This may only be called by governance or the strategist.\"},\"setMinReportDelay(uint256)\":{\"notice\":\"Used to change `minReportDelay`. `minReportDelay` is the minimum number  of blocks that should pass for `harvest()` to be called.  For external keepers (such as the Keep3r network), this is the minimum  time between jobs to wait. (see `harvestTrigger()`  for more details.)  This may only be called by governance or the strategist.\"},\"setRewards(address)\":{\"notice\":\"Used to change `rewards`. EOA or smart contract which has the permission  to pull rewards from the vault.  This may only be called by the strategist.\"},\"setStrategist(address)\":{\"notice\":\"Used to change `strategist`.  This may only be called by governance or the existing strategist.\"},\"sweep(address)\":{\"notice\":\"Removes tokens from this Strategy that are not the type of tokens  managed by this Strategy. This may be used in case of accidentally  sending the wrong kind of token to this Strategy.  Tokens will be sent to `governance()`.  This will fail if an attempt is made to sweep `want`, or any tokens  that are protected by this Strategy.  This may only be called by governance.\"},\"tend()\":{\"notice\":\"Adjust the Strategy's position. The purpose of tending isn't to  realize gains, but to maximize yield by reinvesting any returns.  See comments on `adjustPosition()`.  This may only be called by governance, the strategist, or the lunar.\"},\"tendTrigger(uint256)\":{\"notice\":\"Provide a signal to the lunar that `tend()` should be called. The  lunar will provide the estimated gas cost that they would pay to call  `tend()`, and this function should use that estimate to make a  determination if calling it is \\\"worth it\\\" for the lunar. This is not  the only consideration into issuing this trigger, for example if the  position would be negatively affected if `tend()` is not called  shortly, then this can return `true` even if the lunar might be  \\\"at a loss\\\" (keepers are always reimbursed by Yearn).\"},\"withdraw(uint256)\":{\"notice\":\"Withdraws `_amountNeeded` to `vault`.  This may only be called by the Vault.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/src/BaseStrategy.sol\":\"BaseStrategyInitializable\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=lib/openzeppelin-contracts/\",\":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\"]},\"sources\":{\"contracts/src/BaseStrategy.sol\":{\"keccak256\":\"0xa9b101992868ae491c1a5020c9688f4b20fd0863441b96c4974122480315028e\",\"license\":\"MIT OR AGPL-3.0\",\"urls\":[\"bzz-raw://30cd4866b8497d2165db60e4db14506fb89e7fe078a1556c33b62c934bb51c94\",\"dweb:/ipfs/QmX4zLr4iyaLair9w4uRep6rnG6sd6kBazwLGoGjQY4pxi\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc5b5dc12fbc4002f282eaa7a5f06d8310ed62c1c77c5770f6283e058454c39a\",\"dweb:/ipfs/Qme9rE2wS3yBuyJq9GgbmzbsBQsW2M2sVFqYYLw7bosGrv\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9d213d3befca47da33f6db0310826bcdb148299805c10d77175ecfe1d06a9a68\",\"dweb:/ipfs/QmRgCn6SP1hbBkExUADFuDo8xkT4UU47yjNF5FhCeRbQmS\"]},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2455248c8ddd9cc6a7af76a13973cddf222072427e7b0e2a7d1aff345145e931\",\"dweb:/ipfs/QmfYjnjRbWqYpuxurqveE6HtzsY1Xx323J428AKQgtBJZm\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.20+commit.a1b79de6"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"clone","type":"address","indexed":true}],"type":"event","name":"Cloned","anonymous":false},{"inputs":[],"type":"event","name":"EmergencyExitEnabled","anonymous":false},{"inputs":[{"internalType":"bool","name":"triggerState","type":"bool","indexed":false}],"type":"event","name":"ForcedHarvestTrigger","anonymous":false},{"inputs":[{"internalType":"uint256","name":"profit","type":"uint256","indexed":false},{"internalType":"uint256","name":"loss","type":"uint256","indexed":false},{"internalType":"uint256","name":"debtPayment","type":"uint256","indexed":false},{"internalType":"uint256","name":"debtOutstanding","type":"uint256","indexed":false}],"type":"event","name":"Harvested","anonymous":false},{"inputs":[{"internalType":"bool","name":"","type":"bool","indexed":false}],"type":"event","name":"SetDoHealthCheck","anonymous":false},{"inputs":[{"internalType":"address","name":"","type":"address","indexed":false}],"type":"event","name":"SetHealthCheck","anonymous":false},{"inputs":[{"internalType":"address","name":"baseFeeOracle","type":"address","indexed":false}],"type":"event","name":"UpdatedBaseFeeOracle","anonymous":false},{"inputs":[{"internalType":"uint256","name":"creditThreshold","type":"uint256","indexed":false}],"type":"event","name":"UpdatedCreditThreshold","anonymous":false},{"inputs":[{"internalType":"address","name":"newKeeper","type":"address","indexed":false}],"type":"event","name":"UpdatedKeeper","anonymous":false},{"inputs":[{"internalType":"uint256","name":"delay","type":"uint256","indexed":false}],"type":"event","name":"UpdatedMaxReportDelay","anonymous":false},{"inputs":[{"internalType":"string","name":"metadataURI","type":"string","indexed":false}],"type":"event","name":"UpdatedMetadataURI","anonymous":false},{"inputs":[{"internalType":"uint256","name":"delay","type":"uint256","indexed":false}],"type":"event","name":"UpdatedMinReportDelay","anonymous":false},{"inputs":[{"internalType":"address","name":"rewards","type":"address","indexed":false}],"type":"event","name":"UpdatedRewards","anonymous":false},{"inputs":[{"internalType":"address","name":"newStrategist","type":"address","indexed":false}],"type":"event","name":"UpdatedStrategist","anonymous":false},{"inputs":[],"stateMutability":"pure","type":"function","name":"apiVersion","outputs":[{"internalType":"string","name":"","type":"string"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"baseFeeOracle","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"address","name":"_vault","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"clone","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"address","name":"_vault","type":"address"},{"internalType":"address","name":"_strategist","type":"address"},{"internalType":"address","name":"_rewards","type":"address"},{"internalType":"address","name":"_lunar","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"clone","outputs":[{"internalType":"address","name":"newStrategy","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"creditThreshold","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"delegatedAssets","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"doHealthCheck","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"emergencyExit","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"estimatedTotalAssets","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"_amtInWei","type":"uint256"}],"stateMutability":"view","type":"function","name":"ethToWant","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"forceHarvestTriggerOnce","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"harvest"},{"inputs":[{"internalType":"uint256","name":"callCostInWei","type":"uint256"}],"stateMutability":"view","type":"function","name":"harvestTrigger","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"healthCheck","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"address","name":"_vault","type":"address"},{"internalType":"address","name":"_strategist","type":"address"},{"internalType":"address","name":"_rewards","type":"address"},{"internalType":"address","name":"_lunar","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"initialize"},{"inputs":[],"stateMutability":"view","type":"function","name":"isActive","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"isBaseFeeAcceptable","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"isOriginal","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"lunar","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"maxReportDelay","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"metadataURI","outputs":[{"internalType":"string","name":"","type":"string"}]},{"inputs":[{"internalType":"address","name":"_newStrategy","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"migrate"},{"inputs":[],"stateMutability":"view","type":"function","name":"minReportDelay","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"name","outputs":[{"internalType":"string","name":"","type":"string"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"rewards","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"address","name":"_baseFeeOracle","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"setBaseFeeOracle"},{"inputs":[{"internalType":"uint256","name":"_creditThreshold","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"setCreditThreshold"},{"inputs":[{"internalType":"bool","name":"_doHealthCheck","type":"bool"}],"stateMutability":"nonpayable","type":"function","name":"setDoHealthCheck"},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"setEmergencyExit"},{"inputs":[{"internalType":"bool","name":"_forceHarvestTriggerOnce","type":"bool"}],"stateMutability":"nonpayable","type":"function","name":"setForceHarvestTriggerOnce"},{"inputs":[{"internalType":"address","name":"_healthCheck","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"setHealthCheck"},{"inputs":[{"internalType":"address","name":"_lunar","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"setKeeper"},{"inputs":[{"internalType":"uint256","name":"_delay","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"setMaxReportDelay"},{"inputs":[{"internalType":"string","name":"_metadataURI","type":"string"}],"stateMutability":"nonpayable","type":"function","name":"setMetadataURI"},{"inputs":[{"internalType":"uint256","name":"_delay","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"setMinReportDelay"},{"inputs":[{"internalType":"address","name":"_rewards","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"setRewards"},{"inputs":[{"internalType":"address","name":"_strategist","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"setStrategist"},{"inputs":[],"stateMutability":"view","type":"function","name":"strategist","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"address","name":"_token","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"sweep"},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"tend"},{"inputs":[{"internalType":"uint256","name":"callCostInWei","type":"uint256"}],"stateMutability":"view","type":"function","name":"tendTrigger","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"vault","outputs":[{"internalType":"contract VaultAPI","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"want","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}]},{"inputs":[{"internalType":"uint256","name":"_amountNeeded","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"withdraw","outputs":[{"internalType":"uint256","name":"_loss","type":"uint256"}]}],"devdoc":{"kind":"dev","methods":{"apiVersion()":{"details":"The Strategy's version must match the Vault's `API_VERSION`.","returns":{"_0":"A string which holds the current API version of this contract."}},"delegatedAssets()":{"details":"You can override this field to set it to a non-zero value if some of the assets of this  Strategy is somehow delegated inside another part of of Yearn's ecosystem e.g. another Vault.  Note that this value must be strictly less than or equal to the amount provided by  `estimatedTotalAssets()` below, as the TVL calc will be total assets minus delegated assets.  Also note that this value is used to determine the total assets under management by this  strategy, for the purposes of computing the management fee in `Vault`","returns":{"_0":"The amount of assets this strategy manages that should not be included in Yearn's Total Value  Locked (TVL) calculation across it's ecosystem."}},"estimatedTotalAssets()":{"details":"Care must be taken in using this function, since it relies on external  systems, which could be manipulated by the attacker to give an inflated  (or reduced) value produced by this function, based on current on-chain  conditions (e.g. this function is possible to influence through  flashloan attacks, oracle manipulations, or other DeFi attack  mechanisms).  It is up to governance to use this function to correctly order this  Strategy relative to its peers in the withdrawal queue to minimize  losses for the Vault based on sudden withdrawals. This value should be  higher than the total debt of the Strategy and higher than its expected  value to be \"safe\".","returns":{"_0":"The estimated total assets in this Strategy."}},"ethToWant(uint256)":{"details":"Care must be taken when working with decimals to assure that the conversion  is compatible. As an example:      given 1e17 wei (0.1 ETH) as input, and want is USDC (6 decimals),      with USDC/ETH = 1800, this should give back 1800000000 (180 USDC)","params":{"_amtInWei":"The amount (in wei/1e-18 ETH) to convert to `want`"},"returns":{"_0":"The amount in `want` of `_amtInEth` converted to `want`*"}},"harvest()":{"details":"When `harvest()` is called, the Strategy reports to the Vault (via  `vault.report()`), so in some cases `harvest()` must be called in order  to take in profits, to borrow newly available funds from the Vault, or  otherwise adjust its position. In other cases `harvest()` must be  called to report to the Vault on the Strategy's position, especially if  any losses have occurred."},"harvestTrigger(uint256)":{"details":"`callCostInWei` must be priced in terms of `wei` (1e-18 ETH).  This call and `tendTrigger` should never return `true` at the  same time.  See `maxReportDelay`, `creditThreshold` to adjust the  strategist-controlled parameters that will influence whether this call  returns `true` or not. These parameters will be used in conjunction  with the parameters reported to the Vault (see `params`) to determine  if calling `harvest()` is merited.  This trigger also checks the network's base fee to avoid harvesting during  times of high network congestion.  Consider use of super.harvestTrigger() in any override to build on top  of this logic instead of replacing it. For example, if using `minReportDelay`.  It is expected that an external system will check `harvestTrigger()`.  This could be a script run off a desktop or cloud bot (e.g.  https://github.com/iearn-finance/yearn-vaults/blob/main/scripts/keep.py),  or via an integration with the Keep3r network (e.g.  https://github.com/Macarse/GenericKeep3rV2/blob/master/contracts/keep3r/GenericKeep3rV2.sol).","params":{"callCostInWei":"The lunar's estimated gas cost to call `harvest()` (in wei)."},"returns":{"_0":"`true` if `harvest()` should be called, `false` otherwise."}},"isBaseFeeAcceptable()":{"returns":{"_0":"`true` if `harvest()` should be allowed, `false` otherwise."}},"migrate(address)":{"details":"The new Strategy's Vault must be the same as this Strategy's Vault.  The migration process should be carefully performed to make sure all the assets are migrated to the new address, which should have never interacted with the vault before.","params":{"_newStrategy":"The Strategy to migrate to."}},"name()":{"details":"You can use this field to manage the \"version\" of this Strategy, e.g.  `StrategySomethingOrOtherV1`. However, \"API Version\" is managed by  `apiVersion()` function above.","returns":{"_0":"This Strategy's name."}},"setBaseFeeOracle(address)":{"params":{"_baseFeeOracle":"Address of our baseFeeOracle"}},"setCreditThreshold(uint256)":{"params":{"_creditThreshold":"The number of want tokens that will  automatically trigger a harvest."}},"setEmergencyExit()":{"details":"See `vault.setEmergencyShutdown()` and `harvest()` for further details."},"setForceHarvestTriggerOnce(bool)":{"params":{"_forceHarvestTriggerOnce":"Value of true tells keepers to harvest  our strategy"}},"setKeeper(address)":{"params":{"_lunar":"The new address to assign as `lunar`."}},"setMaxReportDelay(uint256)":{"params":{"_delay":"The maximum number of seconds to wait between harvests."}},"setMetadataURI(string)":{"params":{"_metadataURI":"The URI that describe the strategy."}},"setMinReportDelay(uint256)":{"params":{"_delay":"The minimum number of seconds to wait between harvests."}},"setRewards(address)":{"params":{"_rewards":"The address to use for pulling rewards."}},"setStrategist(address)":{"params":{"_strategist":"The new address to assign as `strategist`."}},"sweep(address)":{"details":"Implement `protectedTokens()` to specify any additional tokens that  should be protected from sweeping in addition to `want`.","params":{"_token":"The token to transfer out of this vault."}},"tendTrigger(uint256)":{"details":"`callCostInWei` must be priced in terms of `wei` (1e-18 ETH).  This call and `harvestTrigger()` should never return `true` at the same  time.","params":{"callCostInWei":"The lunar's estimated gas cost to call `tend()` (in wei)."},"returns":{"_0":"`true` if `tend()` should be called, `false` otherwise."}},"withdraw(uint256)":{"params":{"_amountNeeded":"How much `want` to withdraw."},"returns":{"_loss":"Any realized losses"}}},"version":1},"userdoc":{"kind":"user","methods":{"apiVersion()":{"notice":"Used to track which version of `StrategyAPI` this Strategy  implements."},"delegatedAssets()":{"notice":"The amount (priced in want) of the total assets managed by this strategy should not count  towards Yearn's TVL calculations."},"estimatedTotalAssets()":{"notice":"Provide an accurate estimate for the total amount of assets  (principle + return) that this Strategy is currently managing,  denominated in terms of `want` tokens.  This total should be \"realizable\" e.g. the total value that could  *actually* be obtained from this Strategy if it were to divest its  entire position based on current on-chain conditions."},"ethToWant(uint256)":{"notice":"Provide an accurate conversion from `_amtInWei` (denominated in wei)  to `want` (using the native decimal characteristics of `want`)."},"harvest()":{"notice":"Harvests the Strategy, recognizing any profits or losses and adjusting  the Strategy's position.  In the rare case the Strategy is in emergency shutdown, this will exit  the Strategy's position.  This may only be called by governance, the strategist, or the lunar."},"harvestTrigger(uint256)":{"notice":"Provide a signal to the lunar that `harvest()` should be called. The  lunar will provide the estimated gas cost that they would pay to call  `harvest()`, and this function should use that estimate to make a  determination if calling it is \"worth it\" for the lunar. This is not  the only consideration into issuing this trigger, for example if the  position would be negatively affected if `harvest()` is not called  shortly, then this can return `true` even if the lunar might be \"at a  loss\" (keepers are always reimbursed by Yearn)."},"isBaseFeeAcceptable()":{"notice":"Check if the current network base fee is below our external target. If  not, then harvestTrigger will return false."},"migrate(address)":{"notice":"Transfers all `want` from this Strategy to `_newStrategy`.  This may only be called by the Vault."},"name()":{"notice":"This Strategy's name."},"setBaseFeeOracle(address)":{"notice":"Used to set our baseFeeOracle, which checks the network's current base  fee price to determine whether it is an optimal time to harvest or tend.  This may only be called by governance or management."},"setCreditThreshold(uint256)":{"notice":"Used to ensure that any significant credit a strategy has from the  vault will be automatically harvested.  This may only be called by governance or management."},"setEmergencyExit()":{"notice":"Activates emergency exit. Once activated, the Strategy will exit its  position upon the next harvest, depositing all funds into the Vault as  quickly as is reasonable given on-chain conditions.  This may only be called by governance or the strategist."},"setForceHarvestTriggerOnce(bool)":{"notice":"Used to automatically trigger a harvest by our lunar. Can be  useful if gas prices are too high now, and we want to harvest  later once prices have lowered.  This may only be called by governance or management."},"setKeeper(address)":{"notice":"Used to change `lunar`.  `lunar` is the only address that may call `tend()` or `harvest()`,  other than `governance()` or `strategist`. However, unlike  `governance()` or `strategist`, `lunar` may *only* call `tend()`  and `harvest()`, and no other authorized functions, following the  principle of least privilege.  This may only be called by governance or the strategist."},"setMaxReportDelay(uint256)":{"notice":"Used to change `maxReportDelay`. `maxReportDelay` is the maximum number  of blocks that should pass for `harvest()` to be called.  For external keepers (such as the Keep3r network), this is the maximum  time between jobs to wait. (see `harvestTrigger()`  for more details.)  This may only be called by governance or the strategist."},"setMetadataURI(string)":{"notice":"Used to change `metadataURI`. `metadataURI` is used to store the URI of the file describing the strategy.  This may only be called by governance or the strategist."},"setMinReportDelay(uint256)":{"notice":"Used to change `minReportDelay`. `minReportDelay` is the minimum number  of blocks that should pass for `harvest()` to be called.  For external keepers (such as the Keep3r network), this is the minimum  time between jobs to wait. (see `harvestTrigger()`  for more details.)  This may only be called by governance or the strategist."},"setRewards(address)":{"notice":"Used to change `rewards`. EOA or smart contract which has the permission  to pull rewards from the vault.  This may only be called by the strategist."},"setStrategist(address)":{"notice":"Used to change `strategist`.  This may only be called by governance or the existing strategist."},"sweep(address)":{"notice":"Removes tokens from this Strategy that are not the type of tokens  managed by this Strategy. This may be used in case of accidentally  sending the wrong kind of token to this Strategy.  Tokens will be sent to `governance()`.  This will fail if an attempt is made to sweep `want`, or any tokens  that are protected by this Strategy.  This may only be called by governance."},"tend()":{"notice":"Adjust the Strategy's position. The purpose of tending isn't to  realize gains, but to maximize yield by reinvesting any returns.  See comments on `adjustPosition()`.  This may only be called by governance, the strategist, or the lunar."},"tendTrigger(uint256)":{"notice":"Provide a signal to the lunar that `tend()` should be called. The  lunar will provide the estimated gas cost that they would pay to call  `tend()`, and this function should use that estimate to make a  determination if calling it is \"worth it\" for the lunar. This is not  the only consideration into issuing this trigger, for example if the  position would be negatively affected if `tend()` is not called  shortly, then this can return `true` even if the lunar might be  \"at a loss\" (keepers are always reimbursed by Yearn)."},"withdraw(uint256)":{"notice":"Withdraws `_amountNeeded` to `vault`.  This may only be called by the Vault."}},"version":1}},"settings":{"remappings":["@openzeppelin/=lib/openzeppelin-contracts/","ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin/=lib/openzeppelin-contracts/contracts/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"contracts/src/BaseStrategy.sol":"BaseStrategyInitializable"},"evmVersion":"shanghai","libraries":{}},"sources":{"contracts/src/BaseStrategy.sol":{"keccak256":"0xa9b101992868ae491c1a5020c9688f4b20fd0863441b96c4974122480315028e","urls":["bzz-raw://30cd4866b8497d2165db60e4db14506fb89e7fe078a1556c33b62c934bb51c94","dweb:/ipfs/QmX4zLr4iyaLair9w4uRep6rnG6sd6kBazwLGoGjQY4pxi"],"license":"MIT OR AGPL-3.0"},"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol":{"keccak256":"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305","urls":["bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5","dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol":{"keccak256":"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a","urls":["bzz-raw://bc5b5dc12fbc4002f282eaa7a5f06d8310ed62c1c77c5770f6283e058454c39a","dweb:/ipfs/Qme9rE2wS3yBuyJq9GgbmzbsBQsW2M2sVFqYYLw7bosGrv"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol":{"keccak256":"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1","urls":["bzz-raw://9d213d3befca47da33f6db0310826bcdb148299805c10d77175ecfe1d06a9a68","dweb:/ipfs/QmRgCn6SP1hbBkExUADFuDo8xkT4UU47yjNF5FhCeRbQmS"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/Address.sol":{"keccak256":"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa","urls":["bzz-raw://2455248c8ddd9cc6a7af76a13973cddf222072427e7b0e2a7d1aff345145e931","dweb:/ipfs/QmfYjnjRbWqYpuxurqveE6HtzsY1Xx323J428AKQgtBJZm"],"license":"MIT"}},"version":1},"id":0}